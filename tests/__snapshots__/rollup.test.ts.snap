// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`rollup > entry-basic.ts 1`] = `
"// entry-basic.js
const node = /* @__PURE__ */ React.createElement("div", null);

function foo() {}

const num = 10;
let Color = /* @__PURE__ */ function(Color) {
	Color[Color["Red"] = 1] = "Red";
	Color[Color["Green"] = 2] = "Green";
	Color[Color["Blue"] = 3] = "Blue";
	return Color;
}({});
class Test {
	constructor(field = 10) {
		this.field = field;
	}
}
let NS;
(function(_NS) {
	const foo = _NS.foo = 1;
})(NS || (NS = {}));
let optionalChain = NS === null || NS === void 0 ? void 0 : NS.foo;

export { Color, foo, node, num, optionalChain };
"
`;

exports[`rollup > entry-minify.ts 1`] = `
"// entry-minify.js
function foo(){return 100}try{foo()}catch(e){}export{foo};
//# sourceMappingURL=entry-minify.js.map

// entry-minify.js.map
{"version":3,"file":"entry-minify.js","sources":["tests/fixtures/entry-minify.ts"],"sourcesContent":["export function foo(): number {\\n  return 100\\n}\\n\\ntry {\\n  foo()\\n} catch (err) {}\\n"],"names":["err"],"mappings":"AAAO,SAAS,KAAc,CACrB,MAAA,IACR,CAED,GAAI,CACG,KAAA,AACN,OAAQA,EAAK,CAAA"}"
`;

exports[`rollup > entry-resolve.ts 1`] = `
"// entry-resolve.js
import path from 'node:path';
import assert from 'assert';

// @ts-check

/** @type {import('prettier').Config} */
var prettier = {
  semi: false,
  singleQuote: true,
  trailingComma: 'all',
  overrides: [
    {
      files: [
        '**/node_modules/**',
        '**/dist/**',
        '**/coverage/**',
        '**/temp/**',
        '**/.vitepress/cache/**',
        '**/.nuxt/**',
        '**/.vercel/**',
        '**/.changeset/**',
        '**/.idea/**',
        '**/.output/**',
        '**/.vite-inspect/**',

        // root directory
        'output/**',

        '**/CHANGELOG*.md',
        '**/*.min.*',
        '**/LICENSE*',
        '**/__snapshots__',
        '**/auto-import?(s).d.ts',
        '**/components.d.ts',
        '**/typed-router.d.ts',
        '**/pnpm-lock.yaml',
      ],
      options: {
        requirePragma: true,
      },
    },
    {
      files: ['**/jsr.json'],
      options: {
        parser: 'json-stringify',
      },
    },
  ],
};

console.log(path, assert, prettier);
"
`;
